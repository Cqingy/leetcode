# Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

# Example:

# Input:  [1,2,3,4]
# Output: [24,12,8,6]
# Note: Please solve it without division and in O(n).

# Follow up:
# Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        product_1 = [1]
        product_2 = [1]
        result = []
        product1 = product2 = 1
        for i in range(len(nums)):
            product1 *= nums[i]
            product2 *= nums[-i-1]
            product_1.append(product1)
            product_2.append(product2)
        for i in range(len(nums)):
            result.append(product_1[i] * product_2[len(nums)-1-i])
        return result
